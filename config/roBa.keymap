#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        Copy {
            bindings = <&kp LG(C)>;
            key-positions = <10 11>;
        };

        Paste {
            bindings = <&kp LG(V)>;
            key-positions = <12 13>;
        };

        Cut {
            bindings = <&kp LG(X)>;
            key-positions = <11 12>;
        };

        allselect {
            bindings = <&kp LG(A)>;
            key-positions = <22 23>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q            &kp W         &kp E             &kp R                 &kp T                                               &kp Y                  &kp U  &lt 5 I    &kp O    &kp P
&kp A            &kp S         &kp D             &kp F                 &kp G      &kp LC(UP_ARROW)        &kp MINUS        &kp H                  &kp J  &kp K      &kp L    &kp ENTER
&kp Z            &kp X         &kp C             &kp V                 &kp B      &kp LC(DOWN_ARROW)      &kp TILDE        &kp N                  &kp M  &kp COMMA  &kp DOT  &lt 6 SLASH
&mt LCTRL LANG2  &kp LEFT_ALT  &kp LEFT_COMMAND  &mt LEFT_SHIFT SPACE  &lt 2 TAB  &lt 4 ESC               &lt 3 BACKSPACE  &mt RIGHT_SHIFT ENTER                             &lt 1 LANG1
            >;
        };

        FUNCTION {
            bindings = <
&kp PAGE_UP    &kp AMPERSAND    &kp ASTERISK  &kp EXCLAMATION  &kp QUESTION                                &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UP_ARROW    &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp END        &kp DOLLAR       &kp PERCENT   &kp LCTRL        &kp DELETE    &kp COLON      &kp SEMICOLON  &kp BACKSPACE         &kp LEFT_ARROW         &kp DOWN_ARROW  &kp RIGHT_ARROW   &mo 5
&kp PAGE_DOWN  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH         &kp EQUAL     &kp PLUS       &kp MINUS      &mkp MB4              &mkp MB1               &mkp MB2        &mkp MB5          &trans
&trans         &trans           &trans        &trans           &trans        &trans         &trans         &trans                                                                         &trans
            >;
        };

        NUM {
            bindings = <
&kp PAGE_UP    &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0                                    &kp F7  &kp F8  &kp F9  &kp F12  &kp RIGHT_PARENTHESIS
&kp ENTER      &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS      &kp ASTERISK      &kp UNDERSCORE  &kp F4  &kp F5  &kp F6  &kp F11  &kp PERCENT
&kp PAGE_DOWN  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS     &kp SLASH         &kp EQUAL       &kp F1  &kp F2  &kp F3  &kp F10  &kp BACKSLASH
&trans         &trans        &trans        &trans        &trans        &trans            &trans          &trans                           &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans             &trans                                  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &kp LS(LA(LC(R)))  &trans  &kp LG(LC(Q))      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3       &trans  &trans             &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans             &trans  &trans             &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
